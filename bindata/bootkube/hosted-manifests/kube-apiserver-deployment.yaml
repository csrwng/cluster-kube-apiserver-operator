kind: Deployment
apiVersion: apps/v1
metadata:
  name: kube-apiserver
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: kube-apiserver
  template:
    metadata:
      labels:
        openshift.io/control-plane: "true"
        openshift.io/component: "api"
        app: kube-apiserver
      annotations:
        openshift.io/run-level: "0"
    spec:
      restartPolicy: Always
      containers:
      - name: kube-apiserver
        image: {{ .Image }}
        imagePullPolicy: {{ .ImagePullPolicy }}
        terminationMessagePolicy: FallbackToLogsOnError
        command: ["hyperkube", "kube-apiserver"]
        args:
        - --openshift-config=/etc/kubernetes/config/{{ .ConfigFileName }}
        - --logtostderr=false
        - --alsologtostderr
        - --log-file=/var/log/bootstrap-control-plane/kube-apiserver.log
        volumeMounts:
        - mountPath: /etc/kubernetes/secrets
          name: secrets
          readOnly: true
        - mountPath: /etc/kubernetes/cloud
          name: etc-kubernetes-cloud
          readOnly: true
        - mountPath: /etc/kubernetes/config
          name: config
          readOnly: true
        - mountPath: /var/log/bootstrap-control-plane
          name: logs
        livenessProbe:
          httpGet:
            scheme: HTTPS
            port: 6443
            path: healthz
          initialDelaySeconds: 45
          timeoutSeconds: 10
        readinessProbe:
          httpGet:
            scheme: HTTPS
            port: 6443
            path: healthz
          initialDelaySeconds: 10
          timeoutSeconds: 10
      terminationGracePeriodSeconds: 135 # bit more than 70s (minimal termination period) + 60s (apiserver graceful termination)
      volumes:
      - secret:
          secretName: control-plane-certificates
        name: secrets
      - emptyDir: {}
        name: etc-kubernetes-cloud
      - configMap:
          name: kube-apiserver-config
        name: config
      - emptyDir: {}
        name: logs
